{"version":3,"sources":["store/localStorage.ts","store/slices/groupSlice.ts","store/slices/authSlice.ts","store/index.ts","store/hooks.ts","api/index.ts","components/shared/MyText.tsx","components/shared/MyButton.tsx","components/shared/LabelInput.tsx","sharedStyles.ts","components/CreateGroup/CreateGroupPresentation.tsx","components/CreateGroup/CreateGroup.tsx","components/Header/HeaderPres.tsx","components/Header/Header.tsx","enums/submitterType.ts","components/Group/GroupPresentation.tsx","components/Group/Group.tsx","components/Home/HomePresentation.tsx","components/Home/Home.tsx","components/shared/CheckBox.tsx","components/Login/LoginPresentation.tsx","components/Login/Login.tsx","components/About/About.tsx","components/Footer/FooterPresentation.tsx","components/Footer/Footer.tsx","components/Main/Main.tsx","App.tsx","assets/icon.png"],"names":["state","serializedState","JSON","stringify","localStorage","setItem","error","groupApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getAllGroups","query","useGetAllGroupsQuery","authSlice","createSlice","name","initialState","token","user","reducers","setToken","action","payload","setUser","logOut","actions","store","configureStore","reducer","authReducer","preloadedState","getItem","parse","loadState","middleware","getDefaultMiddleware","concat","setupListeners","dispatch","useAppDispatch","useDispatch","useAppSelector","useSelector","axios","get","console","log","createGroup","group","post","headers","Authorization","updateGroup","_id","put","deleteGroup","delete","validate","api","register","login","MyText","children","style","onPress","Text","tw","MyButton","title","textStyle","Pressable","pressed","LabelInput","View","modalStyle","cardStyle","formStyle","inputStyle","CreateGroupPresentation","handleSubmit","handleChange","upcs","close","Modal","animationType","transparent","visible","onRequestClose","TextInput","onChangeText","text","currentTarget","id","value","placeholder","keyboardType","multiline","numberOfLines","textAlignVertical","CreateGroup","auth","useState","formState","setFormState","refetch","presentationProps","upcsToNumberArray","trim","split","forEach","upc","push","parseInt","noDupes","Set","response","data","Alert","alert","message","Platform","OS","window","event","total","newChar","length","test","HeaderPres","createOpen","setCreateOpen","screenHeight","paddingTop","Image","source","require","submitterType","Header","Dimensions","height","presProps","GroupPresentation","savedUpcs","copyToClipboard","FlatList","keyExtractor","item","toString","renderItem","add","remove","Group","savedTitle","submitter","newArray","filter","savedUpc","status","prev","confirm","savedToString","Clipboard","setString","join","props","HomePresentation","groupOpen","setGroupOpen","isLoading","Home","useEffect","find","CheckBox","onValueChange","icon","faSquare","faCheck","LoginPresentation","newUser","toggleNewUser","username","setUsername","password","setPassword","repeatPassword","setRepeatPassword","show","toggleShow","labelInputStyle","autoComplete","secureTextEntry","faEyeSlash","faEye","Login","newState","About","Linking","openURL","FooterPresentation","aboutOpen","setAboutOpen","Footer","Main","then","result","App","subscribe","debounce","saveState","getState","module","exports"],"mappings":"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","file":"static/js/app.3e1e2297.chunk.js","sourcesContent":["const KEY = \"redux\";\nexport function loadState() {\n  try {\n    const serializedState = localStorage.getItem(KEY);\n    if (!serializedState) return undefined;\n    return JSON.parse(serializedState);\n  } catch (error) {\n    return undefined;\n  }\n}\n\nexport async function saveState(state: any) {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(KEY, serializedState);\n  } catch (error) {\n    // Ignore\n  }\n}\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const groupApi = createApi({\n  reducerPath: \"groupApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://upc-tracker.herokuapp.com\",\n  }),\n  endpoints: (builder) => ({\n    getAllGroups: builder.query({ query: () => \"/api/group/\" }),\n  }),\n});\n\nexport const { useGetAllGroupsQuery } = groupApi;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface IauthSliceState {\n  token: string | null;\n  user: string | null;\n}\n\nconst initialState = { token: null, user: null } as IauthSliceState;\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    setToken: (state: IauthSliceState, action: PayloadAction<string>) => {\n      state.token = action.payload;\n    },\n    setUser: (state: IauthSliceState, action: PayloadAction<string>) => {\n      state.user = action.payload;\n    },\n    logOut: (state: IauthSliceState) => {\n      state.user = null;\n      state.token = null;\n    },\n  },\n});\n\nexport const { setToken, setUser, logOut } = authSlice.actions;\n\nexport default authSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\n// reducers\nimport { groupApi } from \"./slices/groupSlice\";\nimport authReducer from \"./slices/authSlice\";\nimport { loadState } from \"./localStorage\";\n\nexport const store = configureStore({\n  reducer: {\n    // Add the generated reducer as a specific top-level slice\n    [groupApi.reducerPath]: groupApi.reducer,\n    auth: authReducer,\n  },\n\n  // get state from localStorage\n  preloadedState: loadState(),\n  // Adding the api middleware enables caching, invalidation, polling,\n  // and other useful features of `rtk-query`.\n  middleware: (getDefaultMiddleware: any) =>\n    getDefaultMiddleware().concat(groupApi.middleware),\n});\n\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\n// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\nsetupListeners(store.dispatch);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./index\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import axios from \"axios\";\n// interfaces\nimport { IgroupUpload } from \"../interfaces/group\";\nimport { InewUser } from \"../interfaces/user\";\n\nconst baseUrl = \"https://upc-tracker.herokuapp.com\";\n\nconst getAllGroups = async () => {\n  try {\n    const response = await axios.get(baseUrl + \"/api/group/\");\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst createGroup = async (token: string, group: IgroupUpload) => {\n  try {\n    const response = await axios.post(`${baseUrl}/api/group/`, group, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst updateGroup = async (_id: string, token: string, group: IgroupUpload) => {\n  const response = await axios.put(`${baseUrl}/api/group/${_id}`, group, {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n  return response;\n};\n\nconst deleteGroup = async (_id: string, token: string) => {\n  try {\n    const response = await axios.delete(`${baseUrl}/api/group/${_id}`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst validate = async (token: string | null) => {\n  try {\n    const response = await axios.get(`${baseUrl}/api/user/validate`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst register = async (user: InewUser) => {\n  try {\n    const response = await axios.post(`${baseUrl}/api/user/register`, user);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst login = async (user: InewUser) => {\n  try {\n    const response = await axios.post(`${baseUrl}/api/user/login`, user);\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst api = {\n  getAllGroups,\n  updateGroup,\n  createGroup,\n  register,\n  login,\n  deleteGroup,\n  validate,\n};\n\nexport default api;\n","import { TextStyle, Text } from \"react-native\";\nimport React, { FC, ReactNode } from \"react\";\nimport tw from \"twrnc\";\n\ninterface Iprops {\n  children?: ReactNode;\n  style?: (TextStyle | undefined) | (TextStyle | undefined)[];\n  onPress?: () => void;\n}\n\nconst MyText: FC<Iprops> = ({ children, style, onPress }) => {\n  return (\n    <Text\n      onPress={onPress}\n      style={[tw`text-base text-black font-medium`, style]}\n    >\n      {children}\n    </Text>\n  );\n};\n\nexport default MyText;\n","import { Pressable, TextStyle, ViewStyle } from \"react-native\";\nimport React, { FC } from \"react\";\nimport tw from \"twrnc\";\nimport MyText from \"./MyText\";\n\ninterface Iprops {\n  title: string;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n  onPress: any;\n}\n\nconst MyButton: FC<Iprops> = ({ title, style, textStyle, onPress }) => {\n  return (\n    <Pressable\n      style={({ pressed }) => [\n        tw`px-4 py-2 m-2 rounded items-center`,\n        pressed ? tw`bg-blue-200` : tw`bg-blue-300`,\n        style,\n      ]}\n      onPress={onPress}\n    >\n      <MyText style={[tw`text-lg`, textStyle]}>{title}</MyText>\n    </Pressable>\n  );\n};\n\nexport default MyButton;\n","import { View, ViewStyle } from \"react-native\";\nimport React, { FC, ReactNode } from \"react\";\nimport tw from \"twrnc\";\n\ninterface Iprops {\n  children?: ReactNode;\n  style?: ViewStyle;\n}\n\nconst LabelInput: FC<Iprops> = ({ children, style }) => {\n  return (\n    <View\n      style={[\n        tw`w-[90%] flex-row justify-between items-start mx-auto my-[1rem]`,\n        style,\n      ]}\n    >\n      {children}\n    </View>\n  );\n};\n\nexport default LabelInput;\n","export const pageTitleStyle = `text-xl mx-auto my-2`;\n\nexport const modalStyle = `absolute top-0 left-0 h-[100%] w-[100%] bg-slate-500/50 flex items-center justify-center`;\n\nexport const cardStyle = `bg-white rounded p-2 w-[95%] h-[95%]`;\n\nexport const cardTitleStyle = `text-lg mx-auto my-2`;\n\nexport const formStyle = `flex flex-col items-center justify-around w-[90%] mx-auto rounded bg-amber-100 p-2`;\n\nexport const inputStyle = `w-[75%] max-w-[90%] sm:max-w-[300px] border-2 border-slate-400 rounded bg-inherit pl-[.5rem] ml-[.5rem]`;\n","import React, { FC } from \"react\";\nimport { Modal, TextInput, View } from \"react-native\";\nimport tw from \"twrnc\";\n// components\nimport MyText from \"../shared/MyText\";\nimport MyButton from \"../shared/MyButton\";\nimport LabelInput from \"../shared/LabelInput\";\n// utils\nimport IchangeEvent from \"../../interfaces/changeEvent\";\n// styles\nimport {\n  cardStyle,\n  cardTitleStyle,\n  formStyle,\n  inputStyle,\n  modalStyle,\n} from \"../../sharedStyles\";\n\ninterface Iprops {\n  handleSubmit: () => Promise<void>;\n  handleChange: (event: IchangeEvent) => void;\n  title: string;\n  upcs: string;\n  close: () => void;\n}\n\nconst CreateGroupPresentation: FC<Iprops> = ({\n  handleSubmit,\n  handleChange,\n  title,\n  upcs,\n  close,\n}) => {\n  return (\n    <Modal animationType=\"slide\" transparent visible onRequestClose={close}>\n      {/* ↓↓ translucent modal back ↓↓ */}\n      <View style={tw`${modalStyle}`}>\n        {/* ↓↓ white modal back ↓↓ */}\n        <View style={tw`${cardStyle} h-[95%] `}>\n          <MyText style={tw`${cardTitleStyle}`}>Create New Group</MyText>\n          <View style={tw`${formStyle}`}>\n            <LabelInput>\n              <MyText>Title</MyText>\n              <TextInput\n                style={tw`${inputStyle}`}\n                onChangeText={(text) =>\n                  handleChange({\n                    currentTarget: { id: \"title\", value: text },\n                  })\n                }\n                value={title}\n                placeholder=\"Enter Title\"\n              />\n            </LabelInput>\n            <LabelInput>\n              <MyText>UPCs</MyText>\n              <TextInput\n                style={tw`${inputStyle}`}\n                onChangeText={(text) =>\n                  handleChange({\n                    currentTarget: { id: \"upcs\", value: text },\n                  })\n                }\n                value={upcs}\n                placeholder=\"Enter UPCs\"\n                keyboardType=\"numeric\"\n                multiline\n                numberOfLines={10}\n                textAlignVertical=\"top\"\n              />\n            </LabelInput>\n            <MyButton title=\"save\" style={tw`w-[30%]`} onPress={handleSubmit} />\n          </View>\n          <MyButton\n            title=\"Cancel\"\n            style={tw`w-[30%] mx-auto m-top-[2rem]`}\n            onPress={close}\n          />\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default CreateGroupPresentation;\n","import React, { FC, useState } from \"react\";\nimport { Alert, Platform } from \"react-native\";\n// utils\nimport api from \"../../api\";\nimport IchangeEvent from \"../../interfaces/changeEvent\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport { useGetAllGroupsQuery } from \"../../store/slices/groupSlice\";\n// components\nimport CreateGroupPresentation from \"./CreateGroupPresentation\";\n\ninterface Iprops {\n  close: () => void;\n}\n\ninterface IformState {\n  title: string;\n  upcs: string;\n}\n\nconst CreateGroup: FC<Iprops> = ({ close }) => {\n  // get auth from redux\n  const { token } = useAppSelector((state) => state.auth);\n\n  // local state for form\n  const initialState: IformState = { title: \"\", upcs: \"\" };\n\n  const [formState, setFormState] = useState(initialState);\n  const { title, upcs } = formState;\n\n  const { refetch } = useGetAllGroupsQuery(\"\");\n\n  // handle change and submit for form\n  const handleChange = (event: IchangeEvent) => {\n    const { id, value } = event.currentTarget;\n    // prevents non-digits from being entered into the upc input\n    if (id === \"upcs\") {\n      const numbers = /[\\d\\s]*/;\n      const total = value.split(\"\");\n      const newChar = total[total.length - 1];\n      if (!numbers.test(newChar)) {\n        return;\n      }\n    }\n    setFormState({ ...formState, [id]: value });\n  };\n\n  const handleSubmit = async () => {\n    // converts the string from the upcs textarea to an array of numbers to send to the api\n    const upcsToNumberArray: number[] = [];\n\n    upcs\n      .trim()\n      .split(\"\\n\")\n      .forEach((upc) => upcsToNumberArray.push(parseInt(upc, 10)));\n\n    // eliminates duplicate UPCs\n    const noDupes = [...new Set(upcsToNumberArray)];\n\n    // send to api\n    try {\n      if (token) {\n        const response = await api.createGroup(token, {\n          title,\n          upcs: noDupes,\n        });\n        console.log(response.data);\n      }\n    } catch (error: any) {\n      console.log(error);\n      Alert.alert(error.message);\n      Platform.OS === \"web\" && window.alert(error.message);\n    }\n    refetch();\n    close();\n  };\n\n  const presentationProps = { handleSubmit, handleChange, title, upcs, close };\n\n  return <CreateGroupPresentation {...presentationProps} />;\n};\n\nexport default CreateGroup;\n","import { View, Image, Platform } from \"react-native\";\nimport React, { FC } from \"react\";\nimport tw from \"twrnc\";\n// components\nimport CreateGroup from \"../CreateGroup/CreateGroup\";\nimport MyButton from \"../shared/MyButton\";\n\ninterface Iprops {\n  logOut: () => void;\n  user: string | null;\n  createOpen: boolean;\n  setCreateOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  screenHeight: number;\n}\n\nconst HeaderPres: FC<Iprops> = ({\n  logOut,\n  user,\n  createOpen,\n  setCreateOpen,\n  screenHeight,\n}) => {\n  return (\n    <View\n      style={[\n        tw`\n        min-h-[${screenHeight * 0.15}px]\n        top-0\n        bg-slate-300\n        text-lg\n        flex-row\n        justify-around\n        items-center`,\n        Platform.OS === \"android\" && { paddingTop: 30 },\n      ]}\n    >\n      <Image\n        style={tw`h-[2rem] w-[2rem]`}\n        source={require(\"../../assets/icon.png\")}\n      />\n      {user && (\n        <MyButton\n          onPress={() => setCreateOpen(true)}\n          title=\"Create New Group\"\n        />\n      )}\n      {user && <MyButton onPress={logOut} title=\"Log Out\" />}\n      {createOpen && <CreateGroup close={() => setCreateOpen(false)} />}\n    </View>\n  );\n};\n\nexport default HeaderPres;\n","import React, { useState, FC } from \"react\";\nimport { Dimensions } from \"react-native\";\n// utils\nimport { useAppSelector } from \"../../store/hooks\";\n// components\nimport CreateGroup from \"../CreateGroup/CreateGroup\";\nimport HeaderPres from \"./HeaderPres\";\n\ninterface Iprops {\n  logOut: () => void;\n}\n\nconst Header: FC<Iprops> = ({ logOut }) => {\n  // get user from redux store\n  const { user } = useAppSelector((state) => state.auth);\n\n  // get screenHeight\n  const screenHeight = Dimensions.get(\"window\").height;\n\n  // state for showing modal\n  const [createOpen, setCreateOpen] = useState(false);\n\n  const presProps = { logOut, user, createOpen, setCreateOpen, screenHeight };\n\n  return (\n    <>\n      <HeaderPres {...presProps} />\n      {createOpen && <CreateGroup close={() => setCreateOpen(false)} />}\n    </>\n  );\n};\n\nexport default Header;\n","enum submitterType {\n  add = \"add\",\n  remove = \"remove\",\n}\n\nexport default submitterType;\n","import React, { FC } from \"react\";\nimport { FlatList, Modal, Platform, TextInput, View } from \"react-native\";\nimport tw from \"twrnc\";\n// components\nimport LabelInput from \"../shared/LabelInput\";\nimport MyButton from \"../shared/MyButton\";\nimport MyText from \"../shared/MyText\";\n// utils\nimport IchangeEvent from \"../../interfaces/changeEvent\";\nimport submitterType from \"../../enums/submitterType\";\n// styles\nimport {\n  cardStyle,\n  cardTitleStyle,\n  formStyle,\n  inputStyle,\n  modalStyle,\n} from \"../../sharedStyles\";\n\ninterface Iprops {\n  title: string;\n  savedUpcs: number[];\n  handleSubmit: (submitter: submitterType) => Promise<void>;\n  handleChange: (event: IchangeEvent) => void;\n  upcs: string;\n  copyToClipboard: () => Promise<void>;\n  close: () => void;\n  deleteGroup: () => void;\n}\n\nconst GroupPresentation: FC<Iprops> = ({\n  title,\n  savedUpcs,\n  handleSubmit,\n  handleChange,\n  upcs,\n  copyToClipboard,\n  close,\n  deleteGroup,\n}) => {\n  return (\n    <Modal animationType=\"slide\" transparent visible onRequestClose={close}>\n      {/* ↓↓ translucent modal back ↓↓ */}\n      <View style={tw`${modalStyle}`}>\n        {/* ↓↓ white modal back ↓↓ */}\n        <View style={tw`${cardStyle}`}>\n          <MyText style={tw`${cardTitleStyle}`}>{title}</MyText>\n          <View style={tw`flex flex-row h-[80%]`}>\n            {/* ↓↓ right side View ↓↓ */}\n            <View style={tw`h-full w-1/3 text-center`}>\n              <MyText style={tw`text-lg`}>Saved UPCs</MyText>\n              <FlatList\n                data={savedUpcs}\n                keyExtractor={(item) => item.toString()}\n                renderItem={({ item }) => <MyText>{item}</MyText>}\n              />\n            </View>\n            {/* ↓↓ left side View ↓↓ */}\n            <View style={tw`h-full w-2/3`}>\n              <View style={tw`${formStyle}`}>\n                <LabelInput>\n                  <MyText>Title</MyText>\n                  <TextInput\n                    style={tw`${inputStyle}`}\n                    onChangeText={(text) =>\n                      handleChange({\n                        currentTarget: { id: \"title\", value: text },\n                      })\n                    }\n                    value={title}\n                    placeholder=\"Enter Title\"\n                  />\n                </LabelInput>\n                <LabelInput>\n                  <MyText>UPCs</MyText>\n                  <TextInput\n                    style={tw`${inputStyle}`}\n                    onChangeText={(text) =>\n                      handleChange({\n                        currentTarget: { id: \"upcs\", value: text },\n                      })\n                    }\n                    value={upcs}\n                    placeholder=\"Enter UPCs\"\n                    keyboardType=\"numeric\"\n                    multiline\n                    numberOfLines={10}\n                    textAlignVertical=\"top\"\n                  />\n                </LabelInput>\n                <MyButton\n                  title=\"add\"\n                  style={tw`w-3/4`}\n                  onPress={() => {\n                    handleSubmit(submitterType.add);\n                  }}\n                />\n                <MyButton\n                  title=\"remove\"\n                  style={tw`w-3/4`}\n                  onPress={() => {\n                    handleSubmit(submitterType.remove);\n                  }}\n                />\n              </View>\n            </View>\n          </View>\n          {/* ↓↓ bottom buttons ↓↓ */}\n          <View\n            style={tw`h-[10%] w-[100%] flex-row justify-around items-center`}\n          >\n            {Platform.OS === \"web\" && (\n              <MyButton\n                title=\"Copy\"\n                style={tw`w-[30%]`}\n                onPress={copyToClipboard}\n              />\n            )}\n\n            <MyButton title=\"Cancel\" style={tw`w-[30%]`} onPress={close} />\n            <MyButton\n              title=\"Delete\"\n              style={tw`w-[30%]`}\n              onPress={deleteGroup}\n            />\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default GroupPresentation;\n","import React, { FC, useState } from \"react\";\nimport { Alert, Platform } from \"react-native\";\nimport Clipboard from \"@react-native-clipboard/clipboard\";\n// components\nimport GroupPresentation from \"./GroupPresentation\";\n// utils\nimport api from \"../../api\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport submitterType from \"../../enums/submitterType\";\nimport IchangeEvent from \"../../interfaces/changeEvent\";\nimport { useGetAllGroupsQuery } from \"../../store/slices/groupSlice\";\n\n// local interfaces\ninterface Iprops {\n  id: string;\n  savedTitle: string;\n  savedUpcs: number[];\n  close: () => void;\n}\n\ninterface IformState {\n  title: string;\n  upcs: string;\n}\n\nconst Group: FC<Iprops> = ({ id, savedTitle, savedUpcs, close }) => {\n  // get auth token from redux store\n  const { token } = useAppSelector((state) => state.auth);\n\n  // local state for form data\n  const initialState: IformState = {\n    title: savedTitle,\n    upcs: \"\",\n  };\n\n  const [formState, setFormState] = useState(initialState);\n  const { title, upcs } = formState;\n\n  const { refetch } = useGetAllGroupsQuery(\"\");\n\n  const handleChange = (event: IchangeEvent) => {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const { id, value } = event.currentTarget;\n    if (id === \"upcs\") {\n      const numbers = /[\\d\\s]*/;\n      const total = value.split(\"\");\n      const newChar = total[total.length - 1];\n      if (!numbers.test(newChar)) {\n        return;\n      }\n    }\n    setFormState((prev) => {\n      return { ...prev, [id]: value };\n    });\n  };\n\n  const handleSubmit = async (submitter: submitterType) => {\n    // converts the string from the upcs textarea to an array of numbers to send to the api\n    const upcsToNumberArray: number[] = [];\n\n    upcs\n      .trim()\n      .split(\"\\n\")\n      .forEach((upc) => upcsToNumberArray.push(parseInt(upc, 10)));\n\n    let newArray: number[] = [...savedUpcs];\n\n    if (submitter === submitterType.add) {\n      upcsToNumberArray.forEach((upc) => newArray.push(upc));\n    } else if (submitter === submitterType.remove) {\n      upcsToNumberArray.forEach((upc) => {\n        newArray = newArray.filter((savedUpc) => savedUpc !== upc);\n      });\n    }\n    // removes duplicate upcs\n    const noDupes = [...new Set(newArray)];\n\n    // send to api\n    try {\n      if (token) {\n        const response = await api.updateGroup(id, token, {\n          title,\n          upcs: noDupes,\n        });\n        console.log(response.status);\n      }\n    } catch (error: any) {\n      console.log(error);\n    }\n    refetch();\n    setFormState((prev) => {\n      return { ...prev, upcs: \"\" };\n    });\n  };\n\n  const deleteGroup = async () => {\n    if (Platform.OS === \"android\") {\n      Alert.alert(\"Delete Group\", \"Are you sure?\", [\n        {\n          text: \"Cancel\",\n          onPress: () => console.log(\"Cancel\"),\n          style: \"cancel\",\n        },\n        {\n          text: \"OK\",\n          onPress: async () => {\n            await api.deleteGroup(id, token ? token : \"\");\n            refetch();\n            close();\n          },\n        },\n      ]);\n    } else {\n      if (window.confirm(\"Are you sure you want to delete this group?\")) {\n        await api.deleteGroup(id, token ? token : \"\");\n        refetch();\n        close();\n      } else {\n        console.log(\"oops\");\n      }\n    }\n  };\n\n  const copyToClipboard = async () => {\n    try {\n      let savedToString: string[] = [];\n      savedUpcs.forEach((upc) => {\n        savedToString.push(upc.toString());\n      });\n      Clipboard.setString(savedToString.join(\" \\n\"));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const props = {\n    title,\n    savedUpcs,\n    handleSubmit,\n    handleChange,\n    upcs,\n    copyToClipboard,\n    close,\n    deleteGroup,\n  };\n\n  return <GroupPresentation {...props} />;\n};\n\nexport default Group;\n","import { FlatList, View } from \"react-native\";\nimport React, { Dispatch, FC, SetStateAction } from \"react\";\nimport { Igroup } from \"../../interfaces/group\";\nimport tw from \"twrnc\";\nimport MyText from \"../shared/MyText\";\nimport MyButton from \"../shared/MyButton\";\nimport Group from \"../Group/Group\";\n\ninterface Iprops {\n  groupOpen: Igroup | null;\n  setGroupOpen: Dispatch<SetStateAction<Igroup | null>>;\n  data: any;\n  isLoading: boolean;\n}\n\nconst HomePresentation: FC<Iprops> = ({\n  groupOpen,\n  setGroupOpen,\n  data,\n  isLoading,\n}) => {\n  return (\n    <View style={[tw`flex-1`]}>\n      <MyText style={[tw`text-xl mx-auto my-2`]}>Groups</MyText>\n      {isLoading && <MyText>Loading...</MyText>}\n      {data && (\n        <FlatList\n          data={data}\n          keyExtractor={(item) => item._id}\n          renderItem={({ item }) => (\n            <MyButton\n              style={tw`mx-auto w-3/4`}\n              title={item.title}\n              onPress={() => setGroupOpen(item)}\n            />\n          )}\n        />\n      )}\n      {groupOpen && (\n        <Group\n          id={groupOpen._id}\n          savedTitle={groupOpen.title}\n          savedUpcs={groupOpen.upcs}\n          close={() => setGroupOpen(null)}\n        />\n      )}\n    </View>\n  );\n};\n\nexport default HomePresentation;\n","import React, { useEffect, useState } from \"react\";\n// components\nimport HomePresentation from \"./HomePresentation\";\n// utils\nimport { useGetAllGroupsQuery } from \"../../store/slices/groupSlice\";\n// interfaces\nimport { Igroup } from \"../../interfaces/group\";\n\nconst Home = () => {\n  // get group data from redux store\n  const { data, error, isLoading } = useGetAllGroupsQuery(\"\");\n  error && console.log(error);\n\n  // state for showing modal\n  const [groupOpen, setGroupOpen] = useState<Igroup | null>(null);\n\n  // update modal when data updates\n  useEffect(() => {\n    groupOpen &&\n      setGroupOpen((prev) =>\n        data.find((group: Igroup) => group._id === prev?._id)\n      );\n  }, [data]);\n\n  const presentationProps = {\n    groupOpen,\n    setGroupOpen,\n    data,\n    isLoading,\n  };\n\n  return <HomePresentation {...presentationProps} />;\n};\n\nexport default Home;\n","import { Pressable, ViewStyle } from \"react-native\";\nimport React, { FC } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-native-fontawesome\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSquare } from \"@fortawesome/free-regular-svg-icons\";\nimport tw from \"twrnc\";\n\ninterface Iprops {\n  value: boolean;\n  onValueChange: () => void;\n  style?: ViewStyle;\n}\n\nconst CheckBox: FC<Iprops> = ({ value, onValueChange, style }) => {\n  return (\n    <Pressable onPress={onValueChange} style={style}>\n      <FontAwesomeIcon icon={faSquare} />\n      {value && <FontAwesomeIcon style={tw`absolute`} icon={faCheck} />}\n    </Pressable>\n  );\n};\n\nexport default CheckBox;\n","import { faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-native-fontawesome\";\nimport tw from \"twrnc\";\nimport React, { FC, FormEvent } from \"react\";\nimport { Button, Pressable, Text, TextInput, View } from \"react-native\";\nimport LabelInput from \"../shared/LabelInput\";\nimport CheckBox from \"../shared/CheckBox\";\nimport MyText from \"../shared/MyText\";\nimport MyButton from \"../shared/MyButton\";\n\ninterface Iprops {\n  handleSubmit: (event: FormEvent) => Promise<void>;\n  newUser: boolean;\n  toggleNewUser: () => void;\n  username: string;\n  setUsername: (newState: string) => void;\n  password: string;\n  setPassword: (newState: string) => void;\n  repeatPassword: string;\n  setRepeatPassword: (newState: string) => void;\n  show: boolean;\n  toggleShow: () => void;\n  screenHeight: number;\n}\n\nconst LoginPresentation: FC<Iprops> = ({\n  handleSubmit,\n  newUser,\n  toggleNewUser,\n  username,\n  setUsername,\n  password,\n  setPassword,\n  repeatPassword,\n  setRepeatPassword,\n  show,\n  toggleShow,\n  screenHeight,\n}) => {\n  const labelInputStyle = tw`border-b-[1px] w-[90%] border-slate-400 relative`;\n\n  return (\n    <View style={tw`min-h-[${screenHeight * 0.85}px] p-2`}>\n      <MyText style={[tw`mx-auto`]}>{newUser ? \"Register\" : \"Login\"}</MyText>\n      <View style={tw`min-h-120 w-[95%] mx-auto rounded bg-amber-100 relative`}>\n        <LabelInput style={labelInputStyle}>\n          <MyText>New User?</MyText>\n          <CheckBox\n            value={newUser}\n            onValueChange={toggleNewUser}\n            style={tw`ml-4 mr-auto w-100 mt-1`}\n          />\n        </LabelInput>\n        <LabelInput style={labelInputStyle}>\n          <MyText>Username</MyText>\n          <TextInput\n            onChangeText={setUsername}\n            autoComplete={newUser ? \"username-new\" : \"username\"}\n            value={username}\n            placeholder=\"Enter Username\"\n          />\n        </LabelInput>\n        <LabelInput style={labelInputStyle}>\n          <MyText>Password</MyText>\n          <TextInput\n            onChangeText={setPassword}\n            autoComplete={newUser ? \"password-new\" : \"password\"}\n            value={password}\n            placeholder=\"Enter Password\"\n            secureTextEntry={!show}\n          />\n          <Pressable\n            onPress={toggleShow}\n            style={tw`absolute right-0 mt-[.25rem]`}\n          >\n            <FontAwesomeIcon icon={show ? faEyeSlash : faEye} />\n          </Pressable>\n        </LabelInput>\n        {newUser && (\n          <LabelInput style={labelInputStyle}>\n            <MyText>Repeat Password</MyText>\n            <TextInput\n              onChangeText={setRepeatPassword}\n              autoComplete=\"password-new\"\n              value={repeatPassword}\n              placeholder=\"Repeat Password\"\n              secureTextEntry={!show}\n            />\n            <Pressable\n              onPress={toggleShow}\n              style={tw`absolute right-0 mt-[.25rem]`}\n            >\n              <FontAwesomeIcon icon={show ? faEyeSlash : faEye} />\n            </Pressable>\n          </LabelInput>\n        )}\n        <MyButton\n          title=\"submit\"\n          onPress={handleSubmit}\n          style={tw`absolute bottom-[5rem] right-3rem left-3rem`}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default LoginPresentation;\n","import React, { useState } from \"react\";\n// utils\nimport { useAppDispatch } from \"../../store/hooks\";\nimport { setToken, setUser } from \"../../store/slices/authSlice\";\nimport api from \"../../api\";\nimport LoginPresentation from \"./LoginPresentation\";\nimport { Alert, Dimensions, Platform } from \"react-native\";\n\nconst Login = () => {\n  const dispatch = useAppDispatch();\n\n  // get screenHeight\n  const screenHeight = Dimensions.get(\"window\").height;\n\n  // form state for login\n  const initialState = {\n    username: \"\",\n    password: \"\",\n    repeatPassword: \"\",\n    newUser: false,\n    show: false,\n  };\n  const [formState, setFormState] = useState(initialState);\n  //destructure for easier use\n  const { username, password, repeatPassword, newUser, show } = formState;\n\n  const setUsername = (newState: typeof initialState.username) => {\n    setFormState({ ...formState, username: newState });\n  };\n\n  const setPassword = (newState: typeof initialState.password) => {\n    setFormState({ ...formState, password: newState });\n  };\n\n  const setRepeatPassword = (newState: typeof initialState.repeatPassword) => {\n    setFormState({ ...formState, repeatPassword: newState });\n  };\n\n  const toggleNewUser = () => {\n    setFormState({ ...formState, newUser: !newUser });\n  };\n\n  const toggleShow = () => {\n    setFormState({ ...formState, show: !show });\n  };\n\n  const handleSubmit = async () => {\n    try {\n      if (newUser) await api.register({ username, password });\n      const response = await api.login({ username, password });\n\n      if (response?.data.token) {\n        dispatch(setToken(response?.data.token));\n        dispatch(setUser(username));\n      } else {\n        Alert.alert(response?.data.message);\n        Platform.OS === \"web\" && window.alert(response?.data.message);\n        setFormState(initialState);\n      }\n    } catch (error: any) {\n      Alert.alert(error.message);\n      Platform.OS === \"web\" && window.alert(error.message);\n    }\n  };\n\n  const props = {\n    handleSubmit,\n    newUser,\n    toggleNewUser,\n    username,\n    setUsername,\n    password,\n    setPassword,\n    repeatPassword,\n    setRepeatPassword,\n    show,\n    toggleShow,\n    screenHeight,\n  };\n\n  return <LoginPresentation {...props} />;\n};\n\nexport default Login;\n","import React, { FC } from \"react\";\nimport tw from \"twrnc\";\n// components\nimport { Linking, Modal, View } from \"react-native\";\nimport MyButton from \"../shared/MyButton\";\nimport MyText from \"../shared/MyText\";\n// styles\nimport { cardStyle, cardTitleStyle, modalStyle } from \"../../sharedStyles\";\n\ninterface Iprops {\n  close: () => void;\n}\n\nconst About: FC<Iprops> = ({ close }) => {\n  return (\n    <Modal animationType=\"slide\" transparent visible onRequestClose={close}>\n      {/* ↓↓ translucent modal back ↓↓ */}\n      <View style={tw`${modalStyle}`}>\n        {/* ↓↓ white modal back ↓↓ */}\n        <View style={tw`${cardStyle} h-[95%] `}>\n          <MyText style={tw`${cardTitleStyle}`}>About</MyText>\n          <MyText>\n            {`\\t`}This is an app that I made in order to keep lists of UPCs. The\n            UPCs can be entered one at a time or pasted in from excel and can be\n            copied and pasted back into excel.{`\\n`}\n          </MyText>\n          <MyText>\n            {`\\t`}The back-end is written in typescript with express and this\n            front-end is written in typescript with React Native. The styling is\n            done using tailwindcss. The repo for this app can be found on GitHub{\" \"}\n            <MyText\n              style={tw`text-blue-600`}\n              onPress={() =>\n                Linking.openURL(\"https://github.com/JonathanDPotter/upcTracker\")\n              }\n            >\n              here\n            </MyText>{\" \"}\n            .\n          </MyText>\n          <MyButton style={tw`m-top-[3rem]`} title=\"close\" onPress={close} />\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default About;\n","import React, { Dispatch, FC } from \"react\";\nimport { View } from \"react-native\";\nimport tw from \"twrnc\";\nimport About from \"../About/About\";\nimport MyButton from \"../shared/MyButton\";\nimport MyText from \"../shared/MyText\";\n\ninterface Iprops {\n  aboutOpen: boolean;\n  setAboutOpen: Dispatch<React.SetStateAction<boolean>>;\n  screenHeight: number;\n}\n\nconst FooterPresentation: FC<Iprops> = ({\n  aboutOpen,\n  setAboutOpen,\n  screenHeight,\n}) => {\n  return (\n    <View\n      style={tw`min-h-[${\n        screenHeight * 0.1\n      }px] bg-slate-300 px-4 absolute bottom-0 left-0 right-0 text-lg flex-row justify-between items-center`}\n    >\n      <MyButton title=\"About\" onPress={() => setAboutOpen(true)} />\n      <MyText>Jonathan Potter 2022</MyText>\n      {aboutOpen && <About close={() => setAboutOpen(false)} />}\n    </View>\n  );\n};\n\nexport default FooterPresentation;\n","import React, { useState } from \"react\";\nimport { Dimensions } from \"react-native\";\nimport FooterPresentation from \"./FooterPresentation\";\n\nconst Footer = () => {\n  const [aboutOpen, setAboutOpen] = useState(false);\n\n  // get screenHeight\n  const screenHeight = Dimensions.get(\"window\").height;\n\n  const presentationProps = { aboutOpen, setAboutOpen, screenHeight };\n\n  return <FooterPresentation {...presentationProps} />;\n};\n\nexport default Footer;\n","import React, { useEffect } from \"react\";\nimport { View } from \"react-native\";\nimport tw from \"twrnc\";\n// utils\nimport { useAppDispatch, useAppSelector } from \"../../store/hooks\";\nimport { setToken, setUser } from \"../../store/slices/authSlice\";\nimport api from \"../../api\";\n// components\nimport Header from \"../Header/Header\";\nimport Home from \"../Home/Home\";\nimport Login from \"../Login/Login\";\nimport Footer from \"../Footer/Footer\";\n\nconst Main = () => {\n  // get auth data from redux store\n  const { user, token } = useAppSelector((state) => state.auth);\n\n  const dispatch = useAppDispatch();\n\n  const logOut = () => {\n    dispatch(setToken(\"\"));\n    dispatch(setUser(\"\"));\n  };\n\n  useEffect(() => {\n    api.validate(token).then((result) => {\n      if (result.status !== 200) {\n        logOut();\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [token]);\n\n  return (\n    <View style={tw`flex-1`}>\n      <Header logOut={logOut} />\n      {user ? <Home /> : <Login />}\n      <Footer />\n    </View>\n  );\n};\n\nexport default Main;\n","import React, { useEffect } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { debounce } from \"debounce\";\n// utils\nimport { saveState } from \"./store/localStorage\";\n// redux store\nimport { store } from \"./store\";\n// components\nimport Main from \"./components/Main/Main\";\nimport { Platform } from \"react-native\";\n\nconst App = () => {\n  useEffect(() => {\n    // saves redux state to localStorage\n    Platform.OS === \"web\" &&\n      store.subscribe(\n        debounce(() => {\n          saveState(store.getState());\n        }, 800)\n      );\n  }, [store]);\n\n  return (\n    <Provider {...{ store }}>\n      <Main />\n    </Provider>\n  );\n};\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/icon.a5cdc404.png\";"],"sourceRoot":""}