{"version":3,"sources":["config/index.ts","store/slices/groupSlice.ts","store/slices/authSlice.ts","store/index.ts","store/hooks.ts","api/index.ts","components/shared/MyText.tsx","components/shared/MyButton.tsx","components/shared/LabelInput.tsx","sharedStyles.ts","components/Scanner/Scanner.tsx","components/CreateGroup/CreateGroupPresentation.tsx","components/CreateGroup/CreateGroup.tsx","components/Header/HeaderPres.tsx","components/Header/Header.tsx","enums/submitterType.ts","components/Group/GroupPresentation.tsx","components/Group/Group.tsx","components/Home/HomePresentation.tsx","components/Home/Home.tsx","components/shared/CheckBox.tsx","components/Login/LoginPresentation.tsx","components/Login/Login.tsx","components/About/About.tsx","components/Footer/FooterPresentation.tsx","components/Footer/Footer.tsx","components/Main/Main.tsx","App.tsx","assets/Poppins-Regular.ttf","assets/icon.png"],"names":["config","baseURL","groupApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getAllGroups","query","useGetAllGroupsQuery","initialState","token","user","_id","authSlice","createSlice","name","reducers","setToken","state","action","payload","setUser","setId","logOut","actions","store","configureStore","reducer","authReducer","middleware","getDefaultMiddleware","concat","setupListeners","dispatch","useAppDispatch","useDispatch","useAppSelector","useSelector","axiosInstance","axios","create","get","error","console","log","createGroup","group","response","post","headers","Authorization","updateGroup","put","deleteGroup","delete","validate","api","register","login","MyText","children","style","onPress","useFonts","require","fontsLoaded","Text","tw","fontFamily","MyButton","title","textStyle","Pressable","pressed","LabelInput","View","modalStyle","cardStyle","formStyle","inputStyle","Scanner","setScannerOpen","setUpcs","upcs","useState","hasPermission","setHasPermission","scanned","setScanned","useEffect","status","BarCodeScanner","requestPermissionsAsync","getBarCodeScannerPermissions","Modal","onBarCodeScanned","undefined","type","data","alert","currentTarget","id","value","StyleSheet","absoluteFillObject","CreateGroupPresentation","handleSubmit","handleChange","close","scannerOpen","animationType","transparent","visible","onRequestClose","TextInput","onChangeText","text","placeholder","keyboardType","multiline","numberOfLines","textAlignVertical","Platform","OS","CreateGroup","auth","formState","setFormState","refetch","presentationProps","upcsToNumberArray","trim","split","forEach","upc","push","parseInt","noDupes","Set","filter","entry","userId","Alert","message","window","event","total","newChar","length","test","HeaderPres","createOpen","setCreateOpen","screenHeight","paddingTop","Image","source","Linking","openURL","submitterType","Header","Dimensions","height","presProps","GroupPresentation","savedUpcs","copyToClipboard","FlatList","keyExtractor","item","toString","renderItem","add","remove","prev","Group","savedTitle","submitter","newArray","savedUpc","confirm","savedToString","Clipboard","setString","join","props","HomePresentation","groupOpen","setGroupOpen","isLoading","Home","find","CheckBox","onValueChange","icon","faSquare","faCheck","LoginPresentation","newUser","toggleNewUser","username","setUsername","password","setPassword","repeatPassword","setRepeatPassword","show","toggleShow","labelInputStyle","autoComplete","secureTextEntry","faEyeSlash","faEye","Login","newState","About","FooterPresentation","aboutOpen","setAboutOpen","Footer","Main","then","result","App","module","exports"],"mappings":"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","file":"static/js/app.fb3a05c4.chunk.js","sourcesContent":["const config = {\n  baseURL: \"https://upc-tracker.herokuapp.com\",\n};\n\nexport default config;\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport config from \"../../config\";\n\nexport const groupApi = createApi({\n  reducerPath: \"groupApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: config.baseURL,\n  }),\n  endpoints: (builder) => ({\n    getAllGroups: builder.query({ query: () => \"api/group/\" }),\n  }),\n});\n\nexport const { useGetAllGroupsQuery } = groupApi;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface IauthSliceState {\n  token: string | null;\n  user: string | null;\n  _id: string | null;\n}\n\nconst initialState = { token: null, user: null, _id: null } as IauthSliceState;\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    setToken: (state: IauthSliceState, action: PayloadAction<string>) => {\n      state.token = action.payload;\n    },\n    setUser: (state: IauthSliceState, action: PayloadAction<string>) => {\n      state.user = action.payload;\n    },\n    setId: (state: IauthSliceState, action: PayloadAction<string>) => {\n      state._id = action.payload;\n    },\n    logOut: (state: IauthSliceState) => {\n      state = initialState;\n    },\n  },\n});\n\nexport const { setToken, setUser, setId, logOut } = authSlice.actions;\n\nexport default authSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\n// reducers\nimport { groupApi } from \"./slices/groupSlice\";\nimport authReducer from \"./slices/authSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    // Add the generated reducer as a specific top-level slice\n    [groupApi.reducerPath]: groupApi.reducer,\n    auth: authReducer,\n  },\n\n  // Adding the api middleware enables caching, invalidation, polling,\n  // and other useful features of `rtk-query`.\n  middleware: (getDefaultMiddleware: any) =>\n    getDefaultMiddleware().concat(groupApi.middleware),\n});\n\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\n// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\nsetupListeners(store.dispatch);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./index\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import axios from \"axios\";\n// interfaces\nimport { IgroupUpload } from \"../interfaces/group\";\nimport { InewUser } from \"../interfaces/user\";\n// config\nimport config from \"../config\";\n\nconst axiosInstance = axios.create({ baseURL: config.baseURL });\n\nconst getAllGroups = async (user: string) => {\n  try {\n    const response = await axiosInstance.get(`/api/group/${user}`);\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst createGroup = async (token: string, group: IgroupUpload) => {\n  try {\n    const response = await axiosInstance.post(`/api/group/`, group, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst updateGroup = async (_id: string, token: string, group: IgroupUpload) => {\n  const response = await axiosInstance.put(`/api/group/${_id}`, group, {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n  return response;\n};\n\nconst deleteGroup = async (_id: string, token: string) => {\n  try {\n    const response = await axiosInstance.delete(`/api/group/${_id}`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst validate = async (token: string | null) => {\n  try {\n    const response = await axiosInstance.get(`/api/user/validate`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst register = async (user: InewUser) => {\n  try {\n    const response = await axiosInstance.post(`/api/user/register`, user);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst login = async (user: InewUser) => {\n  try {\n    const response = await axiosInstance.post(`/api/user/login`, user);\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst api = {\n  getAllGroups,\n  updateGroup,\n  createGroup,\n  register,\n  login,\n  deleteGroup,\n  validate,\n};\n\nexport default api;\n","import { TextStyle, Text } from \"react-native\";\nimport React, { FC, ReactNode } from \"react\";\nimport { useFonts } from \"expo-font\";\nimport tw from \"twrnc\";\n\ninterface Iprops {\n  children?: ReactNode;\n  style?: (TextStyle | undefined) | (TextStyle | undefined)[];\n  onPress?: () => void;\n}\n\nconst MyText: FC<Iprops> = ({ children, style, onPress }) => {\n  const [fontsLoaded] = useFonts({\n    \"Poppins-Regular\": require(\"../../assets/Poppins-Regular.ttf\"),\n  });\n  return (\n    <Text\n      onPress={onPress}\n      style={[\n        tw`text-base text-black`,\n        style,\n        fontsLoaded ? { fontFamily: \"Poppins-Regular\" } : null,\n      ]}\n    >\n      {children}\n    </Text>\n  );\n};\n\nexport default MyText;\n","import { Pressable, TextStyle, ViewStyle } from \"react-native\";\nimport React, { FC } from \"react\";\nimport tw from \"twrnc\";\nimport MyText from \"./MyText\";\n\ninterface Iprops {\n  title: string;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n  onPress: any;\n}\n\nconst MyButton: FC<Iprops> = ({ title, style, textStyle, onPress }) => {\n  return (\n    <Pressable\n      style={({ pressed }) => [\n        tw`px-4 py-2 m-2 rounded items-center`,\n        pressed ? tw`bg-blue-200` : tw`bg-blue-300`,\n        style,\n      ]}\n      onPress={onPress}\n    >\n      <MyText style={[tw`text-lg`, textStyle]}>{title}</MyText>\n    </Pressable>\n  );\n};\n\nexport default MyButton;\n","import { View, ViewStyle } from \"react-native\";\nimport React, { FC, ReactNode } from \"react\";\nimport tw from \"twrnc\";\n\ninterface Iprops {\n  children?: ReactNode;\n  style?: ViewStyle;\n}\n\nconst LabelInput: FC<Iprops> = ({ children, style }) => {\n  return (\n    <View\n      style={[\n        tw`w-[90%] flex-row justify-between items-center mx-auto my-[1rem]`,\n        style,\n      ]}\n    >\n      {children}\n    </View>\n  );\n};\n\nexport default LabelInput;\n","export const pageTitleStyle = `text-xl mx-auto my-2`;\n\nexport const modalStyle = `absolute top-0 left-0 h-[100%] w-[100%] bg-slate-500/50 flex items-center justify-center`;\n\nexport const cardStyle = `bg-white rounded p-2 w-[95%] h-[95%]`;\n\nexport const cardTitleStyle = `text-lg mx-auto my-2`;\n\nexport const formStyle = `flex flex-col items-center justify-around w-[90%] mx-auto rounded bg-amber-100 p-2`;\n\nexport const inputStyle = `w-[75%] max-w-[90%] sm:max-w-[300px] border-2 border-slate-400 rounded bg-inherit pl-[.5rem] ml-[.5rem]`;\n","import React, {\n  useState,\n  useEffect,\n  Dispatch,\n  SetStateAction,\n  FC,\n} from \"react\";\nimport { StyleSheet, Modal, View } from \"react-native\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nimport tw from \"twrnc\";\n// components\nimport MyText from \"../shared/MyText\";\nimport MyButton from \"../shared/MyButton\";\n// interfaces\nimport IchangeEvent from \"../../interfaces/changeEvent\";\n\ninterface Iprops {\n  upcs: string;\n  setUpcs: (event: IchangeEvent) => void;\n  setScannerOpen: Dispatch<SetStateAction<boolean>>;\n}\n\nconst Scanner: FC<Iprops> = ({ setScannerOpen, setUpcs, upcs }) => {\n  const [hasPermission, setHasPermission] = useState<boolean | null>(null);\n  const [scanned, setScanned] = useState(false);\n\n  useEffect(() => {\n    const getBarCodeScannerPermissions = async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === \"granted\");\n    };\n\n    getBarCodeScannerPermissions();\n  }, []);\n\n  const handleBarCodeScanned = ({\n    type,\n    data,\n  }: {\n    type: string;\n    data: string;\n  }) => {\n    setScanned(true);\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n    setUpcs({\n      currentTarget: { id: \"upcs\", value: upcs + `\\n` + data },\n    });\n  };\n\n  if (hasPermission === null) {\n    return <MyText>Requesting for camera permission</MyText>;\n  }\n  if (hasPermission === false) {\n    return <MyText>No access to camera</MyText>;\n  }\n\n  return (\n    <Modal style={tw`relative`}>\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={StyleSheet.absoluteFillObject}\n      />\n      {scanned && (\n        <MyButton\n          title={\"Tap to Scan Again\"}\n          style={tw`absolute top-[1.5rem] w-[96%]`}\n          onPress={() => setScanned(false)}\n        />\n      )}\n      <MyButton\n        title=\"Done Scanning\"\n        onPress={() => setScannerOpen(false)}\n        style={tw`absolute bottom-[1.5rem] w-[96%]`}\n      />\n    </Modal>\n  );\n};\n\nexport default Scanner;\n","import React, { Dispatch, FC, SetStateAction } from \"react\";\nimport { Modal, Platform, TextInput, View } from \"react-native\";\nimport tw from \"twrnc\";\n// components\nimport MyText from \"../shared/MyText\";\nimport MyButton from \"../shared/MyButton\";\nimport LabelInput from \"../shared/LabelInput\";\n// utils\nimport IchangeEvent from \"../../interfaces/changeEvent\";\n// styles\nimport {\n  cardStyle,\n  cardTitleStyle,\n  formStyle,\n  inputStyle,\n  modalStyle,\n} from \"../../sharedStyles\";\nimport Scanner from \"../Scanner/Scanner\";\n\ninterface Iprops {\n  handleSubmit: () => Promise<void>;\n  handleChange: (event: IchangeEvent) => void;\n  title: string;\n  upcs: string;\n  close: () => void;\n  scannerOpen: boolean;\n  setScannerOpen: Dispatch<SetStateAction<boolean>>;\n}\n\nconst CreateGroupPresentation: FC<Iprops> = ({\n  handleSubmit,\n  handleChange,\n  title,\n  upcs,\n  close,\n  scannerOpen,\n  setScannerOpen,\n}) => {\n  return (\n    <Modal animationType=\"slide\" transparent visible onRequestClose={close}>\n      {/* ↓↓ translucent modal back ↓↓ */}\n      <View style={tw`${modalStyle}`}>\n        {/* ↓↓ white modal back ↓↓ */}\n        <View style={tw`${cardStyle} h-[95%] `}>\n          <MyText style={tw`${cardTitleStyle}`}>Create New Group</MyText>\n          <View style={tw`${formStyle}`}>\n            <LabelInput>\n              <MyText>Title</MyText>\n              <TextInput\n                style={tw`${inputStyle}`}\n                onChangeText={(text) =>\n                  handleChange({\n                    currentTarget: { id: \"title\", value: text },\n                  })\n                }\n                value={title}\n                placeholder=\"Enter Title\"\n              />\n            </LabelInput>\n            <LabelInput>\n              <MyText>UPCs</MyText>\n              <TextInput\n                style={tw`${inputStyle}`}\n                onChangeText={(text) =>\n                  handleChange({\n                    currentTarget: { id: \"upcs\", value: text },\n                  })\n                }\n                value={upcs}\n                placeholder=\"Enter UPCs\"\n                keyboardType=\"numeric\"\n                multiline\n                numberOfLines={10}\n                textAlignVertical=\"top\"\n              />\n            </LabelInput>\n\n            <MyButton title=\"save\" style={tw`w-[30%]`} onPress={handleSubmit} />\n          </View>\n          {Platform.OS === \"android\" ? (\n            <MyButton\n              title=\"Scan\"\n              style={tw`w-[30%] mx-auto m-top-[2rem]`}\n              onPress={() => setScannerOpen(true)}\n            />\n          ) : (\n            <></>\n          )}\n          <MyButton\n            title=\"Cancel\"\n            style={tw`w-[30%] mx-auto m-top-[2rem]`}\n            onPress={close}\n          />\n        </View>\n      </View>\n      {scannerOpen ? (\n        <Scanner\n          setScannerOpen={setScannerOpen}\n          setUpcs={handleChange}\n          upcs={upcs}\n        />\n      ) : (\n        <></>\n      )}\n    </Modal>\n  );\n};\n\nexport default CreateGroupPresentation;\n","import React, { FC, useState } from \"react\";\nimport { Alert, Platform } from \"react-native\";\n// utils\nimport api from \"../../api\";\nimport IchangeEvent from \"../../interfaces/changeEvent\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport { useGetAllGroupsQuery } from \"../../store/slices/groupSlice\";\n// components\nimport CreateGroupPresentation from \"./CreateGroupPresentation\";\n\ninterface Iprops {\n  close: () => void;\n}\n\ninterface IformState {\n  title: string;\n  upcs: string;\n}\n\nconst CreateGroup: FC<Iprops> = ({ close }) => {\n  // get auth from redux\n  const { token, _id } = useAppSelector((state) => state.auth);\n\n  // local state for form\n  const initialState: IformState = { title: \"\", upcs: \"\" };\n\n  const [scannerOpen, setScannerOpen] = useState(false);\n\n  const [formState, setFormState] = useState(initialState);\n  const { title, upcs } = formState;\n\n  const { refetch } = useGetAllGroupsQuery(\"\");\n\n  // handle change and submit for form\n  const handleChange = (event: IchangeEvent) => {\n    const { id, value } = event.currentTarget;\n    // prevents non-digits from being entered into the upc input\n    if (id === \"upcs\") {\n      const numbers = /[\\d\\s]*/;\n      const total = value.split(\"\");\n      const newChar = total[total.length - 1];\n      if (!numbers.test(newChar)) {\n        return;\n      }\n    }\n    setFormState({ ...formState, [id]: value });\n  };\n\n  const handleSubmit = async () => {\n    // converts the string from the upcs textarea to an array of numbers to send to the api\n    const upcsToNumberArray: number[] = [];\n\n    upcs\n      .trim()\n      .split(\"\\n\")\n      .forEach((upc) => upcsToNumberArray.push(parseInt(upc, 10)));\n\n    // eliminates duplicate UPCs\n    const noDupes = [...new Set(upcsToNumberArray)].filter(\n      (entry) => entry !== null\n    );\n\n    // send to api\n    try {\n      if (token && _id) {\n        await api.createGroup(token, {\n          title,\n          upcs: noDupes,\n          userId: _id,\n        });\n      }\n    } catch (error: any) {\n      console.log(error);\n      Alert.alert(error.message);\n      Platform.OS === \"web\" && window.alert(error.message);\n    }\n    refetch();\n    close();\n  };\n\n  const presentationProps = {\n    handleSubmit,\n    handleChange,\n    title,\n    upcs,\n    close,\n    scannerOpen,\n    setScannerOpen,\n  };\n\n  return <CreateGroupPresentation {...presentationProps} />;\n};\n\nexport default CreateGroup;\n","import { View, Image, Platform, Linking } from \"react-native\";\nimport React, { FC } from \"react\";\nimport tw from \"twrnc\";\n// components\nimport CreateGroup from \"../CreateGroup/CreateGroup\";\nimport MyButton from \"../shared/MyButton\";\n\ninterface Iprops {\n  logOut: () => void;\n  user: string | null;\n  createOpen: boolean;\n  setCreateOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  screenHeight: number;\n}\n\nconst HeaderPres: FC<Iprops> = ({\n  logOut,\n  user,\n  createOpen,\n  setCreateOpen,\n  screenHeight,\n}) => {\n  return (\n    <View\n      style={[\n        tw`\n        min-h-[${screenHeight * 0.15}px]\n        top-0\n        bg-slate-300\n        text-lg\n        flex-row\n        justify-around\n        items-center`,\n        Platform.OS === \"android\" && { paddingTop: 30 },\n      ]}\n    >\n      <Image\n        style={tw`h-[2rem] w-[2rem]`}\n        source={require(\"../../assets/icon.png\")}\n      />\n      {user ? (\n        <MyButton\n          onPress={() => setCreateOpen(true)}\n          title=\"Create New Group\"\n        />\n      ) : null}\n      {user ? <MyButton onPress={logOut} title=\"Log Out\" /> : null}\n      {Platform.OS === \"web\" && user ? (\n        <MyButton\n          onPress={() => {\n            Linking.openURL(\n              \"https://play.google.com/store/apps/details?id=com.jonathandpotter.upctracker\"\n            );\n          }}\n          title=\"Get App\"\n        />\n      ) : null}\n      {createOpen ? <CreateGroup close={() => setCreateOpen(false)} /> : null}\n    </View>\n  );\n};\n\nexport default HeaderPres;\n","import React, { useState, FC } from \"react\";\nimport { Dimensions } from \"react-native\";\n// utils\nimport { useAppSelector } from \"../../store/hooks\";\n// components\nimport CreateGroup from \"../CreateGroup/CreateGroup\";\nimport HeaderPres from \"./HeaderPres\";\n\ninterface Iprops {\n  logOut: () => void;\n}\n\nconst Header: FC<Iprops> = ({ logOut }) => {\n  // get user from redux store\n  const { user } = useAppSelector((state) => state.auth);\n\n  // get screenHeight\n  const screenHeight = Dimensions.get(\"window\").height;\n\n  // state for showing modal\n  const [createOpen, setCreateOpen] = useState(false);\n\n  const presProps = { logOut, user, createOpen, setCreateOpen, screenHeight };\n\n  return (\n    <>\n      <HeaderPres {...presProps} />\n      {createOpen && <CreateGroup close={() => setCreateOpen(false)} />}\n    </>\n  );\n};\n\nexport default Header;\n","enum submitterType {\n  add = \"add\",\n  remove = \"remove\",\n}\n\nexport default submitterType;\n","import React, { Dispatch, FC, SetStateAction } from \"react\";\nimport { FlatList, Modal, Platform, TextInput, View } from \"react-native\";\n\nimport tw from \"twrnc\";\n// components\nimport LabelInput from \"../shared/LabelInput\";\nimport MyButton from \"../shared/MyButton\";\nimport MyText from \"../shared/MyText\";\n// utils\nimport IchangeEvent from \"../../interfaces/changeEvent\";\nimport submitterType from \"../../enums/submitterType\";\n// styles\nimport {\n  cardStyle,\n  cardTitleStyle,\n  formStyle,\n  inputStyle,\n  modalStyle,\n} from \"../../sharedStyles\";\nimport Scanner from \"../Scanner/Scanner\";\n\ninterface Iprops {\n  title: string;\n  savedUpcs: number[];\n  handleSubmit: (submitter: submitterType) => Promise<void>;\n  handleChange: (event: IchangeEvent) => void;\n  upcs: string;\n  copyToClipboard: () => Promise<void>;\n  close: () => void;\n  deleteGroup: () => void;\n  scannerOpen: boolean;\n  setScannerOpen: Dispatch<SetStateAction<boolean>>;\n}\n\nconst GroupPresentation: FC<Iprops> = ({\n  title,\n  savedUpcs,\n  handleSubmit,\n  handleChange,\n  upcs,\n  copyToClipboard,\n  close,\n  deleteGroup,\n  scannerOpen,\n  setScannerOpen,\n}) => {\n  return (\n    <Modal animationType=\"slide\" transparent visible onRequestClose={close}>\n      {/* ↓↓ translucent modal back ↓↓ */}\n      <View style={tw`${modalStyle}`}>\n        {/* ↓↓ white modal back ↓↓ */}\n        <View style={tw`${cardStyle}`}>\n          <MyText style={tw`${cardTitleStyle}`}>{title}</MyText>\n          <View style={tw`flex flex-row h-[80%]`}>\n            {/* ↓↓ right side View ↓↓ */}\n            <View style={tw`h-full w-1/3 text-center`}>\n              <MyText style={tw`text-lg`}>Saved UPCs</MyText>\n              <FlatList\n                data={savedUpcs}\n                keyExtractor={(item) => item?.toString()}\n                renderItem={({ item }) =>\n                  item ? <MyText>{item}</MyText> : null\n                }\n              />\n            </View>\n            {/* ↓↓ left side View ↓↓ */}\n            <View style={tw`h-full w-2/3`}>\n              <View style={tw`${formStyle}`}>\n                <LabelInput>\n                  <MyText>Title</MyText>\n                  <TextInput\n                    style={tw`${inputStyle}`}\n                    onChangeText={(text) =>\n                      handleChange({\n                        currentTarget: { id: \"title\", value: text },\n                      })\n                    }\n                    value={title}\n                    placeholder=\"Enter Title\"\n                  />\n                </LabelInput>\n                <LabelInput style={tw`items-start`}>\n                  <MyText>UPCs</MyText>\n                  <TextInput\n                    style={tw`${inputStyle}`}\n                    onChangeText={(text) =>\n                      handleChange({\n                        currentTarget: { id: \"upcs\", value: text },\n                      })\n                    }\n                    value={upcs}\n                    placeholder=\"Enter UPCs\"\n                    keyboardType=\"numeric\"\n                    multiline\n                    numberOfLines={10}\n                    textAlignVertical=\"top\"\n                  />\n                </LabelInput>\n                <MyButton\n                  title=\"add/save\"\n                  style={tw`w-3/4`}\n                  onPress={() => {\n                    handleSubmit(submitterType.add);\n                  }}\n                />\n                <MyButton\n                  title=\"remove\"\n                  style={tw`w-3/4`}\n                  onPress={() => {\n                    handleSubmit(submitterType.remove);\n                  }}\n                />\n              </View>\n            </View>\n          </View>\n          {/* ↓↓ bottom buttons ↓↓ */}\n          <View\n            style={tw`h-[10%] w-[100%] flex-row justify-around items-center`}\n          >\n            {Platform.OS === \"web\" ? (\n              <MyButton\n                title=\"Copy\"\n                style={tw`w-[30%]`}\n                onPress={copyToClipboard}\n              />\n            ) : (\n              <MyButton\n                title=\"Scan\"\n                style={tw`w-[30%]`}\n                onPress={() => setScannerOpen((prev) => !prev)}\n              />\n            )}\n\n            <MyButton title=\"Cancel\" style={tw`w-[30%]`} onPress={close} />\n            <MyButton\n              title=\"Delete\"\n              style={tw`w-[30%]`}\n              onPress={deleteGroup}\n            />\n          </View>\n        </View>\n      </View>\n      {scannerOpen ? (\n        <Scanner\n          setScannerOpen={setScannerOpen}\n          setUpcs={handleChange}\n          upcs={upcs}\n        />\n      ) : (\n        <></>\n      )}\n    </Modal>\n  );\n};\n\nexport default GroupPresentation;\n","import React, { FC, useState } from \"react\";\nimport { Alert, Platform } from \"react-native\";\nimport Clipboard from \"@react-native-clipboard/clipboard\";\n// components\nimport GroupPresentation from \"./GroupPresentation\";\n// utils\nimport api from \"../../api\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport submitterType from \"../../enums/submitterType\";\nimport IchangeEvent from \"../../interfaces/changeEvent\";\nimport { useGetAllGroupsQuery } from \"../../store/slices/groupSlice\";\n\n// local interfaces\ninterface Iprops {\n  id: string;\n  savedTitle: string;\n  savedUpcs: number[];\n  close: () => void;\n}\n\ninterface IformState {\n  title: string;\n  upcs: string;\n}\n\nconst Group: FC<Iprops> = ({ id, savedTitle, savedUpcs, close }) => {\n  // get auth token from redux store\n  const { token } = useAppSelector((state) => state.auth);\n\n  // local state for form data\n  const initialState: IformState = {\n    title: savedTitle,\n    upcs: \"\",\n  };\n  const [scannerOpen, setScannerOpen] = useState(false);\n  const [formState, setFormState] = useState(initialState);\n  const { title, upcs } = formState;\n\n  const { refetch } = useGetAllGroupsQuery(\"\");\n\n  const handleChange = (event: IchangeEvent) => {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const { id, value } = event.currentTarget;\n    if (id === \"upcs\") {\n      const numbers = /[\\d\\s]*/;\n      const total = value.split(\"\");\n      const newChar = total[total.length - 1];\n      if (!numbers.test(newChar)) {\n        return;\n      }\n    }\n    setFormState((prev) => {\n      return { ...prev, [id]: value };\n    });\n  };\n\n  const handleSubmit = async (submitter: submitterType) => {\n    // converts the string from the upcs textarea to an array of numbers to send to the api\n    const upcsToNumberArray: number[] = [];\n\n    upcs\n      .trim()\n      .split(\"\\n\")\n      .forEach((upc) => upcsToNumberArray.push(parseInt(upc, 10)));\n\n    let newArray: number[] = [...savedUpcs];\n\n    if (submitter === submitterType.add) {\n      upcsToNumberArray.forEach((upc) => newArray.push(upc));\n    } else if (submitter === submitterType.remove) {\n      upcsToNumberArray.forEach((upc) => {\n        newArray = newArray.filter((savedUpc) => savedUpc !== upc);\n      });\n    }\n    // removes duplicate upcs\n    const noDupes = [...new Set(newArray)].filter((entry) => entry !== null);\n\n    // send to api\n    try {\n      if (token) {\n        const response = await api.updateGroup(id, token, {\n          title,\n          upcs: noDupes,\n        });\n        console.log(response.status);\n      }\n    } catch (error: any) {\n      console.log(error);\n    }\n    refetch();\n    setFormState((prev) => {\n      return { ...prev, upcs: \"\" };\n    });\n  };\n\n  const deleteGroup = async () => {\n    if (Platform.OS === \"android\") {\n      Alert.alert(\n        \"Delete Group\",\n        \"Are you sure you want to delete this group?\",\n        [\n          {\n            text: \"Cancel\",\n            onPress: () => console.log(\"Cancel\"),\n            style: \"cancel\",\n          },\n          {\n            text: \"OK\",\n            onPress: async () => {\n              await api.deleteGroup(id, token ? token : \"\");\n              refetch();\n              close();\n            },\n          },\n        ]\n      );\n    } else {\n      if (window.confirm(\"Are you sure you want to delete this group?\")) {\n        await api.deleteGroup(id, token ? token : \"\");\n        refetch();\n        close();\n      } else {\n        console.log(\"oops\");\n      }\n    }\n  };\n\n  const copyToClipboard = async () => {\n    try {\n      let savedToString: string[] = [];\n      savedUpcs.forEach((upc) => {\n        savedToString.push(upc.toString());\n      });\n      Clipboard.setString(savedToString.join(\" \\n\"));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const props = {\n    title,\n    savedUpcs,\n    handleSubmit,\n    handleChange,\n    upcs,\n    copyToClipboard,\n    close,\n    deleteGroup,\n    scannerOpen,\n    setScannerOpen,\n  };\n\n  return <GroupPresentation {...props} />;\n};\n\nexport default Group;\n","import { FlatList, View } from \"react-native\";\nimport React, { Dispatch, FC, SetStateAction } from \"react\";\nimport tw from \"twrnc\";\n// interfaces\nimport { Igroup } from \"../../interfaces/group\";\n// components\nimport MyText from \"../shared/MyText\";\nimport MyButton from \"../shared/MyButton\";\nimport Group from \"../Group/Group\";\n\ninterface Iprops {\n  groupOpen: Igroup | null;\n  setGroupOpen: Dispatch<SetStateAction<Igroup | null>>;\n  data: any;\n  isLoading: boolean;\n  userId: string | null;\n}\n\nconst HomePresentation: FC<Iprops> = ({\n  groupOpen,\n  setGroupOpen,\n  data,\n  isLoading,\n  userId,\n}) => {\n  return (\n    <View style={[tw`flex-1`]}>\n      <MyText style={[tw`text-xl mx-auto my-2`]}>Groups</MyText>\n      {isLoading && <MyText>Loading...</MyText>}\n      {data && (\n        <FlatList\n          data={data}\n          keyExtractor={(item) => item._id}\n          renderItem={({ item }) =>\n            item.userId && item.userId === userId ? (\n              <MyButton\n                style={tw`mx-auto w-3/4`}\n                title={item.title}\n                onPress={() => setGroupOpen(item)}\n              />\n            ) : (\n              <></>\n            )\n          }\n        />\n      )}\n      {groupOpen && (\n        <Group\n          id={groupOpen._id}\n          savedTitle={groupOpen.title}\n          savedUpcs={groupOpen.upcs}\n          close={() => setGroupOpen(null)}\n        />\n      )}\n    </View>\n  );\n};\n\nexport default HomePresentation;\n","import React, { useEffect, useState } from \"react\";\n// components\nimport HomePresentation from \"./HomePresentation\";\n// utils\nimport { useGetAllGroupsQuery } from \"../../store/slices/groupSlice\";\n// interfaces\nimport { Igroup } from \"../../interfaces/group\";\nimport { useAppSelector } from \"../../store/hooks\";\n\nconst Home = () => {\n  // get group data from redux store\n  const { data, error, isLoading } = useGetAllGroupsQuery(\"\");\n  error && console.log(error);\n\n  // get user id from redux store\n  const userId = useAppSelector((state) => state.auth._id);\n\n  // state for showing modal\n  const [groupOpen, setGroupOpen] = useState<Igroup | null>(null);\n\n  // update modal when data updates\n  useEffect(() => {\n    groupOpen &&\n      setGroupOpen((prev) =>\n        data.find((group: Igroup) => group._id === prev?._id)\n      );\n  }, [data]);\n\n\n  const presentationProps = {\n    groupOpen,\n    setGroupOpen,\n    data,\n    isLoading,\n    userId,\n  };\n\n  return <HomePresentation {...presentationProps} />;\n};\n\nexport default Home;\n","import { Pressable, ViewStyle } from \"react-native\";\nimport React, { FC } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-native-fontawesome\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSquare } from \"@fortawesome/free-regular-svg-icons\";\nimport tw from \"twrnc\";\n\ninterface Iprops {\n  value: boolean;\n  onValueChange: () => void;\n  style?: ViewStyle;\n}\n\nconst CheckBox: FC<Iprops> = ({ value, onValueChange, style }) => {\n  return (\n    <Pressable onPress={onValueChange} style={style}>\n      <FontAwesomeIcon icon={faSquare} />\n      {value && <FontAwesomeIcon style={tw`absolute`} icon={faCheck} />}\n    </Pressable>\n  );\n};\n\nexport default CheckBox;\n","import { faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-native-fontawesome\";\nimport tw from \"twrnc\";\nimport React, { FC, FormEvent } from \"react\";\nimport { Button, Pressable, Text, TextInput, View } from \"react-native\";\nimport LabelInput from \"../shared/LabelInput\";\nimport CheckBox from \"../shared/CheckBox\";\nimport MyText from \"../shared/MyText\";\nimport MyButton from \"../shared/MyButton\";\n\ninterface Iprops {\n  handleSubmit: (event: FormEvent) => Promise<void>;\n  newUser: boolean;\n  toggleNewUser: () => void;\n  username: string;\n  setUsername: (newState: string) => void;\n  password: string;\n  setPassword: (newState: string) => void;\n  repeatPassword: string;\n  setRepeatPassword: (newState: string) => void;\n  show: boolean;\n  toggleShow: () => void;\n  screenHeight: number;\n}\n\nconst LoginPresentation: FC<Iprops> = ({\n  handleSubmit,\n  newUser,\n  toggleNewUser,\n  username,\n  setUsername,\n  password,\n  setPassword,\n  repeatPassword,\n  setRepeatPassword,\n  show,\n  toggleShow,\n  screenHeight,\n}) => {\n  const labelInputStyle = tw`border-b-[1px] w-[90%] border-slate-400 relative`;\n\n  return (\n    <View style={tw`min-h-[${screenHeight * 0.85}px] p-2`}>\n      <MyText style={[tw`mx-auto`]}>{newUser ? \"Register\" : \"Login\"}</MyText>\n      <View style={tw`min-h-120 w-[95%] mx-auto rounded bg-amber-100 relative`}>\n        <LabelInput style={labelInputStyle}>\n          <MyText>New User?</MyText>\n          <CheckBox\n            value={newUser}\n            onValueChange={toggleNewUser}\n            style={tw`ml-4 mr-auto w-100 mt-1`}\n          />\n        </LabelInput>\n        <LabelInput style={labelInputStyle}>\n          <MyText>Username</MyText>\n          <TextInput\n            onChangeText={setUsername}\n            autoComplete={newUser ? \"username-new\" : \"username\"}\n            value={username}\n            placeholder=\"Enter Username\"\n          />\n        </LabelInput>\n        <LabelInput style={labelInputStyle}>\n          <MyText>Password</MyText>\n          <TextInput\n            onChangeText={setPassword}\n            autoComplete={newUser ? \"password-new\" : \"password\"}\n            value={password}\n            placeholder=\"Enter Password\"\n            secureTextEntry={!show}\n          />\n          <Pressable\n            onPress={toggleShow}\n            style={tw`absolute right-0 mt-[.25rem]`}\n          >\n            <FontAwesomeIcon icon={show ? faEyeSlash : faEye} />\n          </Pressable>\n        </LabelInput>\n        {newUser && (\n          <LabelInput style={labelInputStyle}>\n            <MyText>Repeat Password</MyText>\n            <TextInput\n              onChangeText={setRepeatPassword}\n              autoComplete=\"password-new\"\n              value={repeatPassword}\n              placeholder=\"Repeat Password\"\n              secureTextEntry={!show}\n            />\n            <Pressable\n              onPress={toggleShow}\n              style={tw`absolute right-0 mt-[.25rem]`}\n            >\n              <FontAwesomeIcon icon={show ? faEyeSlash : faEye} />\n            </Pressable>\n          </LabelInput>\n        )}\n        <MyButton\n          title=\"submit\"\n          onPress={handleSubmit}\n          style={tw`absolute bottom-[5rem] right-3rem left-3rem`}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default LoginPresentation;\n","import React, { useState } from \"react\";\n// utils\nimport { useAppDispatch } from \"../../store/hooks\";\nimport { setId, setToken, setUser } from \"../../store/slices/authSlice\";\nimport api from \"../../api\";\nimport LoginPresentation from \"./LoginPresentation\";\nimport { Alert, Dimensions, Platform } from \"react-native\";\n\nconst Login = () => {\n  const dispatch = useAppDispatch();\n\n  // get screenHeight\n  const screenHeight = Dimensions.get(\"window\").height;\n\n  // form state for login\n  const initialState = {\n    username: \"\",\n    password: \"\",\n    repeatPassword: \"\",\n    newUser: false,\n    show: false,\n  };\n  const [formState, setFormState] = useState(initialState);\n  //destructure for easier use\n  const { username, password, repeatPassword, newUser, show } = formState;\n\n  const setUsername = (newState: typeof initialState.username) => {\n    setFormState({ ...formState, username: newState });\n  };\n\n  const setPassword = (newState: typeof initialState.password) => {\n    setFormState({ ...formState, password: newState });\n  };\n\n  const setRepeatPassword = (newState: typeof initialState.repeatPassword) => {\n    setFormState({ ...formState, repeatPassword: newState });\n  };\n\n  const toggleNewUser = () => {\n    setFormState({ ...formState, newUser: !newUser });\n  };\n\n  const toggleShow = () => {\n    setFormState({ ...formState, show: !show });\n  };\n\n  const handleSubmit = async () => {\n    try {\n      if (newUser) await api.register({ username, password });\n      const response = await api.login({ username, password });\n\n      if (response?.data.token) {\n        console.log(response?.data)\n        dispatch(setToken(response?.data.token));\n        dispatch(setUser(username));\n        dispatch(setId(response?.data.user._id));\n      } else {\n        Alert.alert(response?.data.message);\n        Platform.OS === \"web\" && window.alert(response?.data.message);\n        setFormState(initialState);\n      }\n    } catch (error: any) {\n      Alert.alert(error.message);\n      Platform.OS === \"web\" && window.alert(error.message);\n    }\n  };\n\n  const props = {\n    handleSubmit,\n    newUser,\n    toggleNewUser,\n    username,\n    setUsername,\n    password,\n    setPassword,\n    repeatPassword,\n    setRepeatPassword,\n    show,\n    toggleShow,\n    screenHeight,\n  };\n\n  return <LoginPresentation {...props} />;\n};\n\nexport default Login;\n","import React, { FC } from \"react\";\nimport tw from \"twrnc\";\n// components\nimport { Linking, Modal, View } from \"react-native\";\nimport MyButton from \"../shared/MyButton\";\nimport MyText from \"../shared/MyText\";\n// styles\nimport { cardStyle, cardTitleStyle, modalStyle } from \"../../sharedStyles\";\n\ninterface Iprops {\n  close: () => void;\n}\n\nconst About: FC<Iprops> = ({ close }) => {\n  return (\n    <Modal animationType=\"slide\" transparent visible onRequestClose={close}>\n      {/* ↓↓ translucent modal back ↓↓ */}\n      <View style={tw`${modalStyle}`}>\n        {/* ↓↓ white modal back ↓↓ */}\n        <View style={tw`${cardStyle} h-[95%] `}>\n          <MyText style={tw`${cardTitleStyle}`}>About</MyText>\n          <MyText>\n            {`\\t`}This is an app that I made in order to keep lists of UPCs. The\n            UPCs can be entered one at a time or pasted in from excel and can be\n            copied and pasted back into excel.{`\\n`}\n          </MyText>\n          <MyText>\n            {`\\t`}The back-end is written in typescript with express and this\n            front-end is written in typescript with React Native. The styling is\n            done using tailwindcss. The repo for this app can be found on GitHub{\" \"}\n            <MyText\n              style={tw`text-blue-600`}\n              onPress={() =>\n                Linking.openURL(\"https://github.com/JonathanDPotter/upcTracker\")\n              }\n            >\n              here\n            </MyText>\n            .{`\\n`}\n          </MyText>\n          <MyButton\n            title=\"view privacy policy\"\n            onPress={() =>\n              Linking.openURL(\n                \"https://www.freeprivacypolicy.com/live/a92f926d-be2a-4b5a-b5ac-68db653294d2\"\n              )\n            }\n          />\n          <MyButton style={tw`m-top-[3rem]`} title=\"close\" onPress={close} />\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default About;\n","import React, { Dispatch, FC } from \"react\";\nimport { Linking, Pressable, View } from \"react-native\";\nimport tw from \"twrnc\";\nimport About from \"../About/About\";\nimport MyButton from \"../shared/MyButton\";\nimport MyText from \"../shared/MyText\";\n\ninterface Iprops {\n  aboutOpen: boolean;\n  setAboutOpen: Dispatch<React.SetStateAction<boolean>>;\n  screenHeight: number;\n}\n\nconst FooterPresentation: FC<Iprops> = ({\n  aboutOpen,\n  setAboutOpen,\n  screenHeight,\n}) => {\n  return (\n    <View\n      style={tw`min-h-[${\n        screenHeight * 0.1\n      }px] bg-slate-300 px-4 absolute bottom-0 left-0 right-0 text-lg flex-row justify-between items-center`}\n    >\n      <MyButton title=\"About\" onPress={() => setAboutOpen(true)} />\n      <MyText>Jonathan Potter 2022</MyText>\n      {aboutOpen && <About close={() => setAboutOpen(false)} />}\n    </View>\n  );\n};\n\nexport default FooterPresentation;\n","import React, { useState } from \"react\";\nimport { Dimensions } from \"react-native\";\nimport FooterPresentation from \"./FooterPresentation\";\n\nconst Footer = () => {\n  const [aboutOpen, setAboutOpen] = useState(false);\n\n  // get screenHeight\n  const screenHeight = Dimensions.get(\"window\").height;\n\n  const presentationProps = { aboutOpen, setAboutOpen, screenHeight };\n\n  return <FooterPresentation {...presentationProps} />;\n};\n\nexport default Footer;\n","import React, { useEffect } from \"react\";\nimport { Platform, View } from \"react-native\";\nimport tw from \"twrnc\";\n// utils\nimport { useAppDispatch, useAppSelector } from \"../../store/hooks\";\nimport { setToken, setUser } from \"../../store/slices/authSlice\";\nimport api from \"../../api\";\n// components\nimport Header from \"../Header/Header\";\nimport Home from \"../Home/Home\";\nimport Login from \"../Login/Login\";\nimport Footer from \"../Footer/Footer\";\n\nconst Main = () => {\n  // get auth data from redux store\n  const { user, token } = useAppSelector((state) => state.auth);\n\n  const dispatch = useAppDispatch();\n\n  const logOut = () => {\n    dispatch(setToken(\"\"));\n    dispatch(setUser(\"\"));\n  };\n\n  useEffect(() => {\n    api.validate(token).then((result) => {\n      if (result?.status !== 200) {\n        logOut();\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <View style={tw`flex-1`}>\n      <Header logOut={logOut} />\n      {user ? <Home /> : <Login />}\n      <Footer />\n    </View>\n  );\n};\n\nexport default Main;\n","import React, { useEffect } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { debounce } from \"debounce\";\n// utils\n// redux store\nimport { store } from \"./store\";\n// components\nimport Main from \"./components/Main/Main\";\nimport { Platform } from \"react-native\";\n\nconst App = () => {\n  return (\n    <Provider {...{ store }}>\n      <Main />\n    </Provider>\n  );\n};\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"./fonts/Poppins-Regular.ttf\";","module.exports = __webpack_public_path__ + \"static/media/icon.a5cdc404.png\";"],"sourceRoot":""}